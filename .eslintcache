[{"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\index.js":"1","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\serviceWorker.js":"2","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\i18n.js":"3","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\contexts\\UserContext.js":"4","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\App.js":"5","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\AppRoutes.js":"6","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\shared\\Footer.js":"7","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\shared\\Navbar.js":"8","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\shared\\Sidebar.js":"9","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\shared\\Spinner.js":"10","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\basic-ui\\Buttons.js":"11","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\error-pages\\Error404.js":"12","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\dashboard\\Dashboard.js":"13","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\basic-ui\\Dropdowns.js":"14","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\error-pages\\Error500.js":"15","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\user-pages\\Login.js":"16","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\basic-ui\\Typography.js":"17","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\tables\\BasicTable.js":"18","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\charts\\ChartJs.js":"19","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\user-pages\\Register.js":"20","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\form-elements\\BasicElements.js":"21","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\icons\\Mdi.js":"22","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\pages\\WorkItems.js":"23","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\services\\user.service.js":"24","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\assets\\validations\\loginValidation.js":"25","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\apps\\TodoList.js":"26","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\services\\works.service.js":"27","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\components\\partial\\DeleteConfirmation.js":"28","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\components\\modals\\DocsModal.js":"29","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\components\\modals\\CreateWork.js":"30","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\services\\common.service.js":"31","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\assets\\validations\\createWorkValidation.js":"32","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\services\\fileService.js":"33","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\pages\\Releases.js":"34","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\components\\Modals\\ReleaseItemsModal.js":"35","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\components\\Modals\\AddWorkModal.js":"36","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\services\\release.service.js":"37","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\components\\modals\\CreateRelease.js":"38","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\components\\modals\\ReleaseItemsModal.js":"39","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\assets\\validations\\createReleaseValidation.js":"40","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\components\\modals\\AddWorkModal.js":"41"},{"size":440,"mtime":1639053006767,"results":"42","hashOfConfig":"43"},{"size":4951,"mtime":1607429281000,"results":"44","hashOfConfig":"43"},{"size":13438,"mtime":1607429281000,"results":"45","hashOfConfig":"43"},{"size":639,"mtime":1638733418710,"results":"46","hashOfConfig":"43"},{"size":2348,"mtime":1607429281000,"results":"47","hashOfConfig":"43"},{"size":2234,"mtime":1639055524242,"results":"48","hashOfConfig":"43"},{"size":885,"mtime":1607429281000,"results":"49","hashOfConfig":"43"},{"size":9415,"mtime":1636306070565,"results":"50","hashOfConfig":"43"},{"size":14970,"mtime":1639056179625,"results":"51","hashOfConfig":"43"},{"size":267,"mtime":1607429281000,"results":"52","hashOfConfig":"43"},{"size":27934,"mtime":1607429281000,"results":"53","hashOfConfig":"43"},{"size":1195,"mtime":1607429281000,"results":"54","hashOfConfig":"43"},{"size":34421,"mtime":1607429281000,"results":"55","hashOfConfig":"43"},{"size":31327,"mtime":1607429281000,"results":"56","hashOfConfig":"43"},{"size":1172,"mtime":1607429281000,"results":"57","hashOfConfig":"43"},{"size":3682,"mtime":1638734046587,"results":"58","hashOfConfig":"43"},{"size":18450,"mtime":1607429281000,"results":"59","hashOfConfig":"43"},{"size":18106,"mtime":1607429281000,"results":"60","hashOfConfig":"43"},{"size":8408,"mtime":1607429281000,"results":"61","hashOfConfig":"43"},{"size":2829,"mtime":1607429281000,"results":"62","hashOfConfig":"43"},{"size":32466,"mtime":1607429281000,"results":"63","hashOfConfig":"43"},{"size":268345,"mtime":1607429281000,"results":"64","hashOfConfig":"43"},{"size":29727,"mtime":1639127923180,"results":"65","hashOfConfig":"43"},{"size":1267,"mtime":1636194597516,"results":"66","hashOfConfig":"43"},{"size":422,"mtime":1635096698038,"results":"67","hashOfConfig":"43"},{"size":5315,"mtime":1607429281000,"results":"68","hashOfConfig":"43"},{"size":2630,"mtime":1638001663787,"results":"69","hashOfConfig":"43"},{"size":668,"mtime":1638734526542,"results":"70","hashOfConfig":"43"},{"size":14318,"mtime":1638737883669,"results":"71","hashOfConfig":"43"},{"size":12514,"mtime":1638738486999,"results":"72","hashOfConfig":"43"},{"size":486,"mtime":1634744715539,"results":"73","hashOfConfig":"43"},{"size":297,"mtime":1634744715523,"results":"74","hashOfConfig":"43"},{"size":776,"mtime":1636194597516,"results":"75","hashOfConfig":"43"},{"size":14970,"mtime":1639124591932,"results":"76","hashOfConfig":"43"},{"size":7469,"mtime":1635940398031,"results":"77","hashOfConfig":"43"},{"size":19622,"mtime":1639055710297,"results":"78","hashOfConfig":"43"},{"size":1628,"mtime":1636194597516,"results":"79","hashOfConfig":"43"},{"size":2494,"mtime":1639056120862,"results":"80","hashOfConfig":"43"},{"size":8262,"mtime":1639126015208,"results":"81","hashOfConfig":"43"},{"size":249,"mtime":1635005261211,"results":"82","hashOfConfig":"43"},{"size":20664,"mtime":1639128176857,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"xxc5mq",{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"86"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"86"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"86"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"86"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"86"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"86"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"86"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\index.js",[],["175","176"],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\serviceWorker.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\i18n.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\contexts\\UserContext.js",["177"],"import { React ,  createContext, useContext, useEffect, useState } from \"react\";\r\n\r\nconst UserContext = createContext();\r\n\r\nexport const UserProvider = ({ children }) => {\r\n    const [activeUser, setActiveUser] = useState({});\r\n\r\n    useEffect(() => {\r\n        setActiveUser(JSON.parse(localStorage.getItem('user')) || {});\r\n        console.log(activeUser)\r\n    }, [])\r\n\r\n    const values = {\r\n        activeUser,\r\n        setActiveUser\r\n    }\r\n\r\n\r\n    return (\r\n        <UserContext.Provider value={values}>{children}</UserContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useUser = () => useContext(UserContext);\r\n\r\nexport default UserContext;","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\App.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\AppRoutes.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\shared\\Footer.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\shared\\Navbar.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\shared\\Sidebar.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\shared\\Spinner.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\basic-ui\\Buttons.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\error-pages\\Error404.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\dashboard\\Dashboard.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\basic-ui\\Dropdowns.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\error-pages\\Error500.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\user-pages\\Login.js",["178","179"],"import { React } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Form } from 'react-bootstrap';\n\nimport { useFormik } from 'formik';\n// import logo1 from 'assets/img/waa2.png'\nimport loginValidationShema from \"../../assets/validations/loginValidation\";\n\nimport { login } from '../../services/user.service'\nimport { useUser } from '../../contexts/UserContext'\n\nconst Login = ({ history }) => {\n\n  const { setActiveUser } = useUser();\n\n  const { handleSubmit, handleChange, values, errors, touched } = useFormik({\n    initialValues: {\n      identifier: '',\n      password: '',\n    },\n    onSubmit: values => {\n      console.log(values)\n      loginAction(values);\n    },\n    validationSchema: loginValidationShema,\n  });\n\n  const loginAction = async (values) => {\n    const res = await login(values)\n    if (res) {\n      setActiveUser(res);\n      setTimeout(() => {\n        history.push('/')\n      }, 500)\n    }\n\n  }\n\n\n  return (\n    <div>\n      <div className=\"d-flex align-items-center auth px-0\">\n        <div className=\"row w-100 mx-0\">\n          <div className=\"col-lg-4 mx-auto\">\n            <div className=\"card text-left py-5 px-4 px-sm-5\">\n              <div className=\"brand-logo\">\n                <img src={require(\"../../assets/images/logo.svg\")} alt=\"logo\" />\n              </div>\n              <h4>Hello! let's get started</h4>\n              <h6 className=\"font-weight-light\">Sign in to continue.</h6>\n              <Form className=\"pt-3\" onSubmit={handleSubmit}>\n                <Form.Group className=\"d-flex search-field\">\n                  <Form.Control\n                    id=\"identifier\"\n                    name=\"identifier\"\n                    type=\"identifier\"\n                    onChange={handleChange}\n                    value={values.identifier}\n                    placeholder=\"Email\" size=\"lg\" className=\"h-auto\" />\n                </Form.Group>\n                <Form.Group className=\"d-flex search-field\">\n                  <Form.Control\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    onChange={handleChange}\n                    value={values.password}\n                    autoComplete=\"off\" placeholder=\"Password\" size=\"lg\" className=\"h-auto\" />\n                </Form.Group>\n                <div className=\"mt-3\">\n                  <Button className=\"btn btn-block btn-primary btn-lg font-weight-medium auth-form-btn\" type=\"submit\">SIGN IN</Button>\n                </div>\n                <div className=\"my-2 d-flex justify-content-between align-items-center\">\n                  <div className=\"form-check\">\n                    <label className=\"form-check-label text-muted\">\n                      <input type=\"checkbox\" className=\"form-check-input\" />\n                      <i className=\"input-helper\"></i>\n                      Keep me signed in\n                    </label>\n                  </div>\n                  <a href=\"!#\" onClick={event => event.preventDefault()} className=\"auth-link text-muted\">Forgot password?</a>\n                </div>\n                <div className=\"mb-2\">\n                  <button type=\"button\" className=\"btn btn-block btn-facebook auth-form-btn\">\n                    <i className=\"mdi mdi-facebook mr-2\"></i>Connect using facebook\n                  </button>\n                </div>\n                <div className=\"text-center mt-4 font-weight-light\">\n                  Don't have an account? <Link to=\"/user-pages/register\" className=\"text-primary\">Create</Link>\n                </div>\n              </Form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n\n}\n\nexport default Login\n","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\basic-ui\\Typography.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\tables\\BasicTable.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\charts\\ChartJs.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\user-pages\\Register.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\form-elements\\BasicElements.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\icons\\Mdi.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\pages\\WorkItems.js",["180","181","182"],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\services\\user.service.js",["183"],"import axios from 'axios';\r\n\r\nconst url = process.env.REACT_APP_PROD_ENV;\r\n\r\nexport const login = (params) => {\r\n    return axios\r\n        .post(`${url}/auth/local`, params)\r\n        .then(response => {\r\n            // Handle success.\r\n            if (response.data.jwt) {\r\n                localStorage.setItem('user', JSON.stringify(response.data.user));\r\n                localStorage.setItem('jwt', JSON.stringify(response.data.jwt));\r\n            }\r\n            return response.data.user;\r\n        });\r\n}\r\n\r\nexport const register = (params) => {\r\n    return axios\r\n        .post(`${url}/auth/local/register`, params)\r\n        .then(response => {\r\n            // Handle success.\r\n            if (response.data.jwt) {\r\n                localStorage.setItem('user', JSON.stringify(response.data.user));\r\n                localStorage.setItem('jwt', JSON.stringify(response.data.jwt));\r\n            }\r\n            return response.data.user;\r\n        });\r\n}\r\n\r\nexport const getInfo = (type) => {\r\n    return type === 'user' ? JSON.parse(localStorage.getItem('user')) : JSON.parse(localStorage.getItem('jwt'));;\r\n}\r\n\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('jwt');\r\n}\r\n","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\assets\\validations\\loginValidation.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\apps\\TodoList.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\services\\works.service.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\components\\partial\\DeleteConfirmation.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\components\\modals\\DocsModal.js",["184","185"],"import { React, useEffect, useState } from 'react'\r\nimport {\r\n     Card, CardImg, CardBody,\r\n     Button,\r\n     CardHeader,\r\n     CardTitle,\r\n\r\n     Row,\r\n     Col,\r\n     UncontrolledAlert,\r\n     Input,\r\n     CardFooter\r\n} from 'reactstrap';\r\nimport { TabContent, TabPane, Nav, NavItem, NavLink, CardText, } from 'reactstrap';\r\nimport classnames from 'classnames';\r\nimport { deleteFileById, uploadFileToWorkItem } from '../../../services/fileService';\r\nimport { getWorkById } from '../../../services/works.service';\r\nimport { updateWork } from '../../../services/works.service'\r\n// import '../../assets/scss/black-dashboard-react/custom/_docsModal.scss'\r\n// import '../../assets/scss/black-dashboard-react/custom/general.scss'\r\n\r\n\r\nfunction DocsModal(props) {\r\n     const [workItem, setWorkItem] = useState({});\r\n     const [workNotes, setWorkNotes] = useState('');\r\n     const [loading, setLoading] = useState(true);\r\n     const [isError, setIsError] = useState(true);\r\n     const [errorMessage, setErrorMessage] = useState('');\r\n\r\n     const [activeTab, setActiveTab] = useState('1');\r\n\r\n     const toggle = tab => {\r\n          if (activeTab !== tab) setActiveTab(tab);\r\n     }\r\n\r\n     const [fileIcons] = useState({\r\n          xlsx: \"https://cdn.icon-icons.com/icons2/342/PNG/512/Excel2_35735.png\",\r\n          docx: \"https://icons.iconarchive.com/icons/blackvariant/button-ui-ms-office-2016/256/Word-2-icon.png\",\r\n          pdf: \"https://cdn-icons-png.flaticon.com/512/524/524553.png\"\r\n     })\r\n\r\n     useEffect(() => {\r\n          getFiles();\r\n     }, [], [workItem]);\r\n\r\n\r\n     useEffect(() => {\r\n          setTimeout(() => {\r\n               setErrorMessage(null);\r\n               setIsError(false)\r\n          }, 10000);\r\n     }, [isError]);\r\n\r\n\r\n     const getFiles = async () => {\r\n          await getWorkById(props.updateItem.id)\r\n               .then(res => {\r\n                    setWorkItem(res.data);\r\n                    setWorkNotes(res.data.notes);\r\n                    setLoading(false);\r\n               });\r\n          setTimeout(() => {\r\n               setErrorMessage(null);\r\n               setIsError(false)\r\n          }, 10000);\r\n     }\r\n\r\n     const deleteFile = async (fileId) => {\r\n          const item = workItem;\r\n          item.Documents.splice(item.Documents.findIndex(item => item.id === fileId), 1);\r\n          setLoading(true);\r\n          await updateWork(item, item.id)\r\n               .then(res => getFiles());\r\n          await deleteFileById(fileId)\r\n               .then(res => getFiles());\r\n     }\r\n\r\n     const upload = () => {\r\n          document.getElementById(\"selectFile\").click()\r\n     }\r\n\r\n     const fileSelectHandler = async (files) => {\r\n          setLoading(true);\r\n          let uploadedFiles = [];\r\n          for (let i = 0; i < files.length; i++) {\r\n               const res = await uploadFileToWorkItem(files[i], props.updateItem.id);\r\n\r\n               if (res && res.status === 200) {\r\n                    uploadedFiles.push(res.data[0]);\r\n               } else {\r\n                    if (res && res.data.error) {\r\n                         setIsError(true);\r\n                         setErrorMessage(res.data.data.errors[0].message);\r\n                    }\r\n               }\r\n          }\r\n\r\n          if (uploadedFiles.length > 0) {\r\n               const newDocs = [...uploadedFiles, ...workItem.Documents];\r\n               const updatedWorkItem = workItem;\r\n               updatedWorkItem.Documents = newDocs;\r\n               await updateWork(updatedWorkItem, updatedWorkItem.id)\r\n                    .then(res => { getFiles(); })\r\n          } else {\r\n               setLoading(false);\r\n          }\r\n     }\r\n\r\n     const saveWorkNotes = async () => {\r\n          setLoading(true);\r\n          const newItem = workItem;\r\n          newItem.notes = workNotes;\r\n          await updateWork(newItem, newItem.id)\r\n               .then(res => { getFiles(); })\r\n     }\r\n\r\n     return (\r\n          <div className=\"file-modal-case\">\r\n\r\n               <div>\r\n                    <Nav tabs>\r\n                         <NavItem>\r\n                              <NavLink\r\n                                   style={{ cursor: 'pointer' }}\r\n                                   className={classnames({ active: activeTab === '1' })}\r\n                                   onClick={() => { toggle('1'); }}\r\n                              >\r\n                                   Files\r\n                              </NavLink>\r\n                         </NavItem>\r\n                         <NavItem>\r\n                              <NavLink\r\n                                   style={{ cursor: 'pointer' }}\r\n                                   className={classnames({ active: activeTab === '2' })}\r\n                                   onClick={() => { toggle('2'); }}\r\n                              >\r\n                                   Notes\r\n                              </NavLink>\r\n                         </NavItem>\r\n                    </Nav>\r\n                    <TabContent activeTab={activeTab}>\r\n                         <TabPane tabId=\"1\">\r\n                              <Row className=\"mt-3\">\r\n                                   <Col sm=\"12\">\r\n                                        <Row>\r\n                                             <Col md=\"12\">\r\n                                                  <Card>\r\n                                                       <CardHeader className=\"file-modal-header\">\r\n                                                            <CardTitle tag=\"h4\" className=\"m-0\">Documents</CardTitle>\r\n                                                       </CardHeader>\r\n                                                       <CardBody>\r\n                                                            {\r\n                                                                 isError && errorMessage &&\r\n                                                                 <UncontrolledAlert color=\"info\">\r\n                                                                      <div> Some Files Could Not Be Uploaded</div>\r\n                                                                      <div>Reason: \" {errorMessage} \"</div>\r\n                                                                 </UncontrolledAlert>\r\n\r\n                                                            }\r\n\r\n                                                            {\r\n                                                                 loading &&\r\n                                                                 <div class=\"spin-wrapper\">\r\n                                                                      <div class=\"spinner\">\r\n                                                                      </div>\r\n                                                                 </div>\r\n                                                            }\r\n\r\n                                                            {\r\n                                                                 !loading && workItem.Documents && workItem.Documents?.length > 0 &&\r\n                                                                 <div key=\"upload\" className=\"d-flex mb-2 pb-3 align-items-start file-item\">\r\n                                                                      <div className=\"col-3\" style={{ color: \"white\", fontSize: \"12px\" }}>File Type</div>\r\n                                                                      <div className=\"col-6 pl-0\" style={{ color: \"white\", fontSize: \"12px\" }}>File Name</div>\r\n                                                                      <div className=\"col-5\">\r\n                                                                      </div>\r\n                                                                 </div>\r\n                                                            }\r\n\r\n                                                            {!loading &&\r\n                                                                 workItem.Documents.map((doc, ind) =>\r\n                                                                      <>\r\n                                                                           <div key={ind} className=\"d-flex mb-2 pb-3 align-items-center file-item\">\r\n                                                                                <div className=\"col-2\"><CardImg className=\"file-img\" top src={fileIcons[doc.ext?.substring(1)]} alt=\"...\" /></div>\r\n                                                                                <div className=\"col-7\" style={{ color: \"white\", fontSize: \"12px\" }}>{doc.name}</div>\r\n                                                                                <div className=\"col-5 p-0\">\r\n                                                                                     <Button target={doc.ext === '.pdf' ? '_blank' : ''} href={`https://waa-app.herokuapp.com${doc.url}`} className=\"btn-rounded mr-1\" color=\"warning\">\r\n                                                                                          <i class=\"fas fa-download m-0\"></i>\r\n                                                                                     </Button>\r\n                                                                                     <Button onClick={() => deleteFile(doc.id)} className=\"btn-rounded\" color=\"danger\">\r\n                                                                                          <i class=\"fas fa-trash-alt m-0\"></i>\r\n                                                                                     </Button>\r\n                                                                                </div>\r\n                                                                           </div>\r\n                                                                      </>\r\n                                                                 )\r\n                                                            }\r\n                                                       </CardBody>\r\n                                                       <CardFooter >\r\n                                                            <div className=\"d-flex justify-content-between\">\r\n                                                                 <Button onClick={props.closeDocModal} className=\"btn-rounded\" color=\"danger\">\r\n                                                                      Close\r\n                                                                 </Button>\r\n                                                                 <Button onClick={upload} className=\"btn-rounded\" color=\"primary\">\r\n                                                                      <i class=\"fas fa-upload\"></i> Upload\r\n                                                                 </Button>\r\n                                                                 <input id='selectFile' hidden multiple type=\"file\" onChange={(event) => fileSelectHandler(event.target.files)}\r\n                                                                      accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/pdf , .pdf , application/vnd.ms-excel , .doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\r\n                                                                 />\r\n                                                            </div>\r\n                                                       </CardFooter>\r\n                                                  </Card>\r\n                                             </Col>\r\n                                        </Row>\r\n                                   </Col>\r\n                              </Row>\r\n                         </TabPane>\r\n\r\n\r\n                         <TabPane tabId=\"2\">\r\n                              <Row className=\"mt-3\">\r\n                                   <Col sm=\"12\">\r\n                                        <Card>\r\n                                             <CardHeader>Enter Your Notes</CardHeader>\r\n                                             <CardBody>\r\n                                                  {\r\n                                                       loading &&\r\n                                                       <div class=\"spin-wrapper\">\r\n                                                       <div class=\"spinner\">\r\n                                                       </div>\r\n                                                  </div>\r\n                                                  }\r\n\r\n                                                  {\r\n                                                       !loading &&\r\n                                                       <>\r\n\r\n                                                            <Input\r\n                                                                 value={workNotes}\r\n                                                                 type=\"textarea\"\r\n                                                                 onChange={(event => setWorkNotes(event.target.value))}\r\n                                                                 style={{ height: \"170px\", padding: \"10px\", fontSize: \"14px\", maxHeight: \"200px\" }}\r\n                                                            ></Input>\r\n                                                            <div className=\"text-right\">\r\n                                                                 <Button disabled={workNotes === workItem.notes} onClick={saveWorkNotes} className=\"col-6 btn-sm mt-3 mb-3\" color=\"primary\">\r\n                                                                      <i class=\"fas fa-save\"></i> Save Changes\r\n                                                                 </Button>\r\n                                                            </div>\r\n\r\n                                                       </>\r\n                                                  }\r\n                                             </CardBody>\r\n\r\n                                        </Card>\r\n                                   </Col>\r\n                              </Row>\r\n                         </TabPane>\r\n                    </TabContent>\r\n\r\n\r\n               </div>\r\n\r\n\r\n          </div>\r\n     )\r\n}\r\n\r\nexport default DocsModal;\r\n","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\components\\modals\\CreateWork.js",["186"],"import React, { useState, useEffect } from 'react';\r\nimport { useFormik } from 'formik';\r\n\r\nimport { createWork, updateWork } from '../../../services/works.service'\r\n\r\nimport createWorkValidationShema from \"../../../assets/validations/createWorkValidation\";\r\n// import '../../assets/scss/black-dashboard-react/custom/createWork.scss'\r\n\r\nimport {\r\n     FormGroup,\r\n     Label,\r\n     Input,\r\n     Button,\r\n     Card,\r\n     CardBody\r\n} from \"reactstrap\";\r\n\r\n\r\nfunction CreateWork(props) {\r\n\r\n     const [loading, setLoading] = useState(true);\r\n     const [itemForUpdate] = useState(props.updateItem);\r\n\r\n     const [environments, setEnvironment] = useState({\r\n          dev: itemForUpdate ? itemForUpdate.dev : {\r\n               active: false,\r\n               date: `${new Date().toLocaleDateString()}`\r\n          },\r\n          fut: itemForUpdate ? itemForUpdate.fut : {\r\n               active: false,\r\n               date: ''\r\n          },\r\n          uat: itemForUpdate ? itemForUpdate.uat : {\r\n               active: false,\r\n               date: ''\r\n          },\r\n          preprod: itemForUpdate ? itemForUpdate.preprod : {\r\n               active: false,\r\n               date: ''\r\n          },\r\n          prod: itemForUpdate ? itemForUpdate.prod : {\r\n               active: false,\r\n               date: ''\r\n          },\r\n     });\r\n\r\n     useEffect(() => {\r\n          setLoading(false);\r\n     }, []);\r\n\r\n     const formik = useFormik({\r\n          initialValues: {\r\n               type: itemForUpdate ? itemForUpdate.type : 'Development',\r\n               ticketId: itemForUpdate ? itemForUpdate.ticketId : '',\r\n               name: itemForUpdate ? itemForUpdate.name : '',\r\n               branch: itemForUpdate ? itemForUpdate.branch : '',\r\n               currentEnv: itemForUpdate ? itemForUpdate.currentEnv : 0,\r\n               ...environments\r\n          },\r\n          onSubmit: values => {\r\n               if (itemForUpdate) {\r\n                    setLoading(true)\r\n                    updateWork(values, itemForUpdate.id)\r\n                         .then(res => {\r\n                              setLoading(false);\r\n                              formik.resetForm();\r\n                              props.closeModal(true)\r\n                         });\r\n               } else {\r\n                    setLoading(true)\r\n                    createWork(values)\r\n                         .then(res => {\r\n                              setLoading(false);\r\n                              formik.resetForm();\r\n                              props.closeModal(true)\r\n                         });\r\n               }\r\n\r\n          },\r\n          validationSchema: createWorkValidationShema,\r\n     });\r\n\r\n     const changeEnv = (key) => {\r\n          const data = environments;\r\n          const keys = Object.keys(environments);\r\n          const ind2 = keys.findIndex(item => item === key)\r\n          keys.map((mapKey, ind) => {\r\n               if (ind > ind2) {\r\n                    data[mapKey].active = false\r\n                    data[mapKey].date = '';\r\n               }\r\n               else if (!data[mapKey].active) {\r\n                    data[mapKey].active = true;\r\n                    data[mapKey].date = `${new Date().toISOString()}`;\r\n               }\r\n               formik.setFieldValue(\"currentEnv\", ind2 + 1);\r\n          });\r\n\r\n          setEnvironment({ ...data });\r\n     }\r\n\r\n\r\n     return (\r\n          <div>\r\n               <div className=\"content\">\r\n                    <Card className=\"container\">\r\n                         <div className=\"text-center mt-3\">\r\n                              <h3>Create Work</h3>\r\n                         </div>\r\n                         <CardBody>\r\n                              {\r\n                                   loading &&\r\n                                   <div class=\"spin-wrapper\">\r\n                                        <div class=\"spinner\">\r\n                                        </div>\r\n                                   </div>\r\n                              }\r\n\r\n                              {\r\n                                   !loading &&\r\n                                   <form onSubmit={formik.handleSubmit}>\r\n                                        <FormGroup>\r\n                                             <Label className=\"log-reg-label\" for=\"type\">Work Type</Label>\r\n                                             <Input\r\n                                                  autocomplete=\"off\"\r\n                                                  type=\"select\"\r\n                                                  name=\"type\"\r\n                                                  id=\"type\"\r\n                                                  onChange={formik.handleChange}\r\n                                                  value={formik.values.type}\r\n                                             >\r\n                                                  <option>Development</option>\r\n                                                  <option>Bug</option>\r\n                                             </Input>\r\n                                        </FormGroup>\r\n                                        <FormGroup>\r\n                                             <Label className=\"log-reg-label\" for=\"ticketId\">Ticket Id</Label>\r\n                                             <Input\r\n                                                  autocomplete=\"off\"\r\n                                                  id=\"ticketId\"\r\n                                                  name=\"ticketId\"\r\n                                                  type=\"ticketId\"\r\n                                                  onChange={formik.handleChange}\r\n                                                  value={formik.values.ticketId}\r\n                                             />\r\n                                        </FormGroup>\r\n                                        <FormGroup>\r\n                                             <Label className=\"log-reg-label\" for=\"name\">Work Name</Label>\r\n                                             <Input\r\n                                                  autocomplete=\"off\"\r\n                                                  id=\"name\"\r\n                                                  name=\"name\"\r\n                                                  type=\"name\"\r\n                                                  onChange={formik.handleChange}\r\n                                                  value={formik.values.name}\r\n                                             />\r\n                                        </FormGroup>\r\n                                        <FormGroup>\r\n                                             <Label className=\"log-reg-label\" for=\"branch\">Work Branch</Label>\r\n                                             <Input\r\n                                                  autocomplete=\"off\"\r\n                                                  id=\"branch\"\r\n                                                  name=\"branch\"\r\n                                                  type=\"branch\"\r\n                                                  onChange={formik.handleChange}\r\n                                                  value={formik.values.branch}\r\n                                             />\r\n                                        </FormGroup>\r\n                                        <Label className=\"log-reg-label\" for=\"branch\">Environments</Label>\r\n                                        <div className=\"d-flex justify-content-between\">\r\n                                             <FormGroup>\r\n                                                  <span style={{ textDecoration: \"underline\", color: \"blue\" }} href=\"#\" id=\"TooltipExample1\">\r\n                                                       <Button type=\"button\" onClick={() => changeEnv('dev')} className=\"btn-icon btn-rounded \" size=\"sm\"\r\n                                                            color={environments.dev.active === true ? \"success\" : \"danger\"}\r\n                                                       >\r\n                                                            <small>Dev</small>\r\n                                                       </Button>\r\n                                                  </span>\r\n                                             </FormGroup>\r\n                                             <FormGroup>\r\n                                                  <span style={{ textDecoration: \"underline\", color: \"blue\" }} href=\"#\" id=\"TooltipExample1\">\r\n                                                       <Button type=\"button\" onClick={() => changeEnv('fut')} className=\"btn-icon btn-rounded \" size=\"sm\"\r\n                                                            color={environments.fut.active === true ? \"success\" : \"danger\"}\r\n                                                       >\r\n                                                            <small>Fut</small>\r\n                                                       </Button>\r\n                                                  </span>\r\n                                             </FormGroup>\r\n\r\n                                             <FormGroup>\r\n                                                  <span style={{ textDecoration: \"underline\", color: \"blue\" }} href=\"#\" id=\"TooltipExample1\">\r\n                                                       <Button type=\"button\" onClick={() => changeEnv('uat')} className=\"btn-icon btn-rounded \" size=\"sm\"\r\n                                                            color={environments.uat.active === true ? \"success\" : \"danger\"}\r\n                                                       >\r\n                                                            <small>Uat</small>\r\n                                                       </Button>\r\n                                                  </span>\r\n                                             </FormGroup>\r\n\r\n                                             <FormGroup>\r\n                                                  <span style={{ textDecoration: \"underline\", color: \"blue\" }} href=\"#\" id=\"TooltipExample1\">\r\n                                                       <Button type=\"button\" onClick={() => changeEnv('preprod')} className=\"btn-icon btn-rounded \" size=\"sm\"\r\n                                                            color={environments.preprod.active === true ? \"success\" : \"danger\"}\r\n                                                       >\r\n                                                            <small>PRP</small>\r\n                                                       </Button>\r\n                                                  </span>\r\n                                             </FormGroup>\r\n\r\n                                             <FormGroup>\r\n                                                  <span style={{ textDecoration: \"underline\", color: \"blue\" }} href=\"#\" id=\"TooltipExample1\">\r\n                                                       <Button type=\"button\" onClick={() => changeEnv('prod')} className=\"btn-icon btn-rounded \" size=\"sm\"\r\n                                                            color={environments.prod.active === true ? \"success\" : \"danger\"}\r\n                                                       >\r\n                                                            <small>PRD</small>\r\n                                                       </Button>\r\n                                                  </span>\r\n                                             </FormGroup>\r\n\r\n                                        </div>\r\n                                        <div className=\"d-flex justify-content-between mt-4\">\r\n                                             <Button className=\"btn-rounded\" onClick={() => props.closeModal(true)} color=\"primary\" type=\"button\">\r\n                                                  Close\r\n                                             </Button>\r\n                                             <Button className=\"btn-rounded\" color=\"primary\" type=\"submit\">\r\n                                                  {itemForUpdate ? 'Update Item' : 'Add New'}\r\n                                             </Button>\r\n                                        </div>\r\n                                   </form>\r\n                              }\r\n\r\n                         </CardBody>\r\n                    </Card>\r\n\r\n               </div>\r\n          </div>\r\n     )\r\n}\r\n\r\nexport default CreateWork;\r\n","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\services\\common.service.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\assets\\validations\\createWorkValidation.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\services\\fileService.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\pages\\Releases.js",["187","188","189"],"import { React, useEffect, useState } from 'react'\r\nimport Moment from 'moment'\r\nimport { getReleases, deleteRelease, createRelease } from '../../services/release.service';\r\n\r\n// import \"../assets/scss/black-dashboard-react/custom/general.scss\"\r\n\r\n\r\n// reactstrap components\r\nimport {\r\n     Card,\r\n     CardHeader,\r\n     CardBody,\r\n     CardTitle,\r\n     Table,\r\n     Row,\r\n     Col,\r\n     Button,\r\n     Modal,\r\n     ModalBody,\r\n     InputGroup,\r\n     InputGroupAddon,\r\n     InputGroupText,\r\n     Input\r\n} from \"reactstrap\";\r\n\r\nimport ReleaseItemsModal from '../components/modals/ReleaseItemsModal';\r\nimport CreateRelease from '../components/modals/CreateRelease';\r\n// import CustomDatePicker from '../components/MinorComponents/CustomDatePicker';\r\nimport DeleteConfirmation from '../components/partial/DeleteConfirmation';\r\n\r\nfunction Releases(props) {\r\n     const [releaseData, setReleaseData] = useState([])\r\n     const [selectedRelease, setSelectedRelease] = useState({})\r\n     const [searchInput, setSearchInput] = useState([]);\r\n     const [loading, setLoading] = useState(true)\r\n\r\n     const [filters, setFilter] = useState({\r\n          releaseDate: null,\r\n          Project_contains: '',\r\n     });\r\n\r\n     const [projectInputValue, setProjectInputValue] = useState('');\r\n\r\n     useEffect(() => {\r\n          getItems();\r\n     }, [filters]);\r\n\r\n\r\n     const {\r\n          buttonLabel,\r\n          className = 'modal-sm',\r\n          classNameCreateRelease = 'modal-sm'\r\n     } = props;\r\n     const [releaseItemsModal, setReleaseItemsModal] = useState(false);\r\n     const toggleReleaseItemsModal = () => setReleaseItemsModal(!releaseItemsModal);\r\n\r\n     const [createReleaseModal, setCreateReleaseModal] = useState(false);\r\n     const toggleCreateReleaseModal = () => setCreateReleaseModal(!createReleaseModal);\r\n\r\n     const [deleteConfirmModal, setDeleteConfirmModal] = useState(false);\r\n     const toggleDeleteConfirmModal = () => setDeleteConfirmModal(!deleteConfirmModal);\r\n\r\n\r\n\r\n     const getItems = async () => {\r\n          const data = await getReleases(filters);\r\n          data.data.forEach(item => {\r\n               item.showBtnColor = getRandomColorForAttributeValue();\r\n          })\r\n          setReleaseData([...data.data]);\r\n          setLoading(false);\r\n     }\r\n\r\n     const saveRelease = async (saveData) => {\r\n          setLoading(true);\r\n          const response = await createRelease(saveData);\r\n          if (response) {\r\n               toggleCreateReleaseModal();\r\n               getItems();\r\n          }\r\n     }\r\n\r\n     const removeRelease = async (item) => {\r\n          setLoading(true);\r\n          const response = await deleteRelease(item.id);\r\n          if (response) {\r\n               confirmationModalActions();\r\n               getItems();\r\n          }\r\n     }\r\n\r\n     const openReleaseItemsModal = (item) => {\r\n          setSelectedRelease({ ...item });\r\n          toggleReleaseItemsModal();\r\n     }\r\n\r\n     const closeReleaseItemsModal = () => {\r\n          toggleReleaseItemsModal();\r\n     }\r\n\r\n     const closeCreateReleasModal = () => {\r\n          toggleCreateReleaseModal();\r\n     }\r\n\r\n     const confirmationModalActions = (item = null, onlyClose = true) => {\r\n          if (!onlyClose)\r\n               setSelectedRelease({ ...item });\r\n\r\n          toggleDeleteConfirmModal();\r\n     }\r\n\r\n\r\n     // Filtering Functions\r\n     const removeFilter = (type) => {\r\n\r\n          let openedInputType = type;\r\n          if (type === 'Project_contains') {\r\n               openedInputType = 'project';\r\n               setProjectInputValue('');\r\n          }\r\n\r\n          const inputs = searchInput;\r\n          inputs.splice(inputs.findIndex(item => item === openedInputType), 1)\r\n          setSearchInput([...inputs]);\r\n\r\n          if (filters[type]) {\r\n               setFilter({ ...filters, [type]: '' });\r\n          }\r\n     }\r\n\r\n     const openInput = (value) => {\r\n          const inputs = searchInput;\r\n          inputs.push(value);\r\n          setSearchInput([...inputs]);\r\n     }\r\n\r\n     const setSelectedReleaseDate = (date) => {\r\n          if (date !== undefined) {\r\n               const formattedDate = new Date(date).toISOString();\r\n               setFilter({ ...filters, releaseDate: formattedDate });\r\n          }\r\n     }\r\n\r\n     const getRandomColorForAttributeValue = () => {\r\n\r\n          const colors = [\"info\", \"warning\", \"success\", \"primary\", \"danger\" , \"dark\" , \"secondary\"];\r\n\r\n          const random = Math.floor(Math.random() * colors.length);\r\n\r\n          return colors[random];\r\n\r\n     }\r\n\r\n\r\n\r\n     return (\r\n          <div className=\"content\">\r\n\r\n               <div className=\"d-flex justify-content-end\">\r\n                    <Button color=\"info btn-md\" onClick={toggleCreateReleaseModal}>{buttonLabel}Create Release</Button>\r\n               </div>\r\n\r\n\r\n               <Row>\r\n                    <Col md=\"12\">\r\n                         <Card className=\"card-plain\">\r\n                              <CardHeader>\r\n                                   <CardTitle tag=\"h1\">Releases</CardTitle>\r\n                              </CardHeader>\r\n                              <CardBody className=\"table-case\">\r\n                                   <div className=\"table-responsive\">\r\n                                        <table className=\"table table-striped\">\r\n                                             <thead className=\"text-primary\">\r\n                                                  <tr className=\"table-head-tr\">\r\n                                                       {\r\n                                                            searchInput.every(item => item !== 'releaseDate') &&\r\n                                                            <th style={{ minWidth: \"200px\" }} onClick={() => openInput('releaseDate')} ><b>Release Date</b> <i class=\"fas fa-search-plus ml-2\"></i>\r\n                                                            </th>\r\n                                                       }\r\n\r\n                                                       {searchInput.find(item => item === 'releaseDate') &&\r\n                                                            <th className=\"p-0 row\" >\r\n                                                                 <span className=\"col-6\">\r\n                                                                      {/* <CustomDatePicker\r\n                                                                      label={'Select Date'}\r\n                                                                      inputFontSize=\"14px\"\r\n                                                                      inputPadding=\"9px 10px\"\r\n                                                                      labelFontSize=\"15px\"\r\n                                                                      setDateToParent={(date) => setSelectedReleaseDate(date)}></CustomDatePicker> */}\r\n                                                                 </span>\r\n                                                                 <span className=\"col-6\">\r\n                                                                      <i onClick={() => removeFilter('releaseDate')} className=\"fas fa-times-circle col-md-1 p-0 close-search-icon\"></i>\r\n                                                                 </span>\r\n                                                            </th>\r\n                                                       }\r\n\r\n                                                       {\r\n                                                            searchInput.every(item => item !== 'project') &&\r\n                                                            <th style={{ minWidth: \"200px\" }} onClick={() => openInput('project')} ><b>Project</b> <i class=\"fas fa-search-plus ml-2\"></i>\r\n                                                            </th>\r\n                                                       }\r\n                                                       {/* Project INPUT */}\r\n                                                       {searchInput.find(item => item === 'project') &&\r\n                                                            <th className=\"align-items-center p-0\" >\r\n                                                                 <InputGroup>\r\n                                                                      <InputGroupAddon onClick={() => filters.Project_contains !== projectInputValue ?\r\n                                                                           setFilter({ ...filters, Project_contains: projectInputValue }) : null} addonType=\"prepend\">\r\n                                                                           <InputGroupText className=\"text-input-search-icon\">\r\n                                                                                <i className=\"fas fa-search-plus\" />\r\n                                                                           </InputGroupText>\r\n                                                                      </InputGroupAddon>\r\n                                                                      <Input\r\n                                                                           type=\"text\"\r\n                                                                           name=\"project\"\r\n                                                                           id=\"project\"\r\n                                                                           value={projectInputValue}\r\n                                                                           onChange={(e) => setProjectInputValue(e.target.value)}\r\n                                                                           onKeyDown={(event) => event.key === 'Enter' && filters.Project_contains !== projectInputValue ?\r\n                                                                                setFilter({ ...filters, Project_contains: projectInputValue }) : null}\r\n                                                                      />\r\n                                                                      <i onClick={() => removeFilter('Project_contains')} className=\"fas fa-times-circle col-md-1 p-0 close-search-icon\"></i>\r\n                                                                 </InputGroup>\r\n                                                            </th>\r\n                                                       }\r\n                                                       <th style={{ minWidth: \"200px\" }}>Scope</th>\r\n                                                       <th style={{ minWidth: \"50px\" }}></th>\r\n                                                  </tr>\r\n                                             </thead>\r\n                                             <tbody>\r\n                                                  {\r\n                                                       loading &&\r\n                                                       <tr>\r\n                                                            <td colspan=\"5\">\r\n                                                                 <div className=\"d-flex w-100 justify-content-center\">\r\n                                                                      <div class=\"spinner\">\r\n                                                                      </div>\r\n                                                                 </div>\r\n\r\n                                                            </td>\r\n\r\n                                                       </tr>\r\n                                                  }\r\n\r\n\r\n                                                  {!loading &&\r\n                                                       releaseData.map((item, ind) =>\r\n                                                            <tr key={ind} className=\"table-body-tr\">\r\n                                                                 <td>{Moment(item.releaseDate).format('DD/MM/YYYY')}</td>\r\n                                                                 <td>{item.Project}</td>\r\n                                                                 <td><Button onClick={() => openReleaseItemsModal(item)}\r\n                                                                      className=\"btn-simple btn-rounded btn-sm\"\r\n                                                                      color={`${item.showBtnColor}`}\r\n                                                                 >Show</Button></td>\r\n                                                                 <td className=\"text-center\">\r\n                                                                      <button onClick={() => confirmationModalActions(item, false)} type=\"button\" className=\"btn btn-inverse-dark btn-rounded btn-icon ml-2\">\r\n                                                                           <i style={{ color: 'white' }} className=\"mdi mdi-delete ml-1\"></i>\r\n                                                                      </button>\r\n                                                                 </td>\r\n                                                            </tr>\r\n\r\n                                                       )\r\n\r\n                                                  }\r\n\r\n                                             </tbody>\r\n                                        </table>\r\n                                   </div>\r\n                              </CardBody>\r\n                         </Card>\r\n                    </Col>\r\n               </Row>\r\n\r\n\r\n\r\n\r\n               <Modal isOpen={releaseItemsModal} toggle={toggleReleaseItemsModal} className={className}>\r\n                    <ModalBody>\r\n                         <ReleaseItemsModal\r\n\r\n                              selectedRelease={selectedRelease}\r\n                              closeReleaseItemsModal={closeReleaseItemsModal}>\r\n                         </ReleaseItemsModal>\r\n                    </ModalBody>\r\n               </Modal>\r\n\r\n\r\n\r\n               <Modal isOpen={createReleaseModal} toggle={toggleCreateReleaseModal} className={classNameCreateRelease}>\r\n                    <ModalBody>\r\n                         <CreateRelease\r\n                              selectedRelease={selectedRelease}\r\n                              closeCreateReleasModal={closeCreateReleasModal}\r\n                              closeAndSaveRelease={(saveData) => saveRelease(saveData)}\r\n                         >\r\n                         </CreateRelease>\r\n                    </ModalBody>\r\n               </Modal>\r\n\r\n               <Modal isOpen={deleteConfirmModal} toggle={toggleDeleteConfirmModal} className={className}>\r\n                    <ModalBody>\r\n                         <DeleteConfirmation message=\"Are You Sure You Want Delete ?\" actionYes={() => removeRelease(selectedRelease)} actionNo={confirmationModalActions}></DeleteConfirmation>\r\n                    </ModalBody>\r\n               </Modal>\r\n\r\n\r\n\r\n          </div>\r\n     )\r\n}\r\n\r\nexport default Releases\r\n","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\components\\Modals\\ReleaseItemsModal.js",["190","191"],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\components\\Modals\\AddWorkModal.js",["192"],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\services\\release.service.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\components\\modals\\CreateRelease.js",["193","194"],"import React, { useEffect, useState } from 'react';\r\nimport { useFormik } from 'formik';\r\n\r\nimport createReleaseValidationShema from \"../../../assets/validations/createReleaseValidation\";\r\n// import '../../assets/scss/black-dashboard-react/custom/createWork.scss'\r\n// import styles from '../../assets/scss/black-dashboard-react/custom/test.module.scss';\r\n\r\n\r\nimport {\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Button,\r\n  Card,\r\n  CardBody\r\n} from \"reactstrap\";\r\n// import CustomDatePicker from 'components/MinorComponents/CustomDatePicker';\r\n\r\n\r\nfunction CreateRelease(props) {\r\n  const [selectedDate, setDateFromChild] = React.useState(new Date());\r\n  const [itemForUpdate] = useState(props.updateItem);\r\n\r\n  useEffect(() => {\r\n    formik.setValues({ releaseDate: selectedDate })\r\n  }, [selectedDate])\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      releaseDate: selectedDate,\r\n      Project: itemForUpdate ? itemForUpdate.ticketId : '',\r\n    },\r\n    onSubmit: values => {\r\n      if (itemForUpdate) {\r\n      } else {\r\n        props.closeAndSaveRelease(values)\r\n      }\r\n    },\r\n    validationSchema: createReleaseValidationShema,\r\n  });\r\n\r\n\r\n\r\n  return (\r\n\r\n    <div>\r\n      <div className=\"content\">\r\n          <h2 className=\"text-center p-0 m-0\">\r\n            Create Release\r\n          </h2>\r\n        <Card className=\"card-plain\" style={{ padding: \"30px 30px 0 30px\" }}>\r\n          <CardBody>\r\n            {/* <CustomDatePicker label=\"Release Date\" setDateToParent={(date) => setDateFromChild(date)}></CustomDatePicker> */}\r\n            <form onSubmit={formik.handleSubmit}>\r\n              <FormGroup className=\"mt-3\">\r\n                <Label for=\"Project\">Project Name</Label>\r\n                <Input\r\n                  id=\"Project\"\r\n                  name=\"Project\"\r\n                  type=\"text\"\r\n                  onChange={formik.handleChange}\r\n                  value={formik.values.Project}\r\n                  style={{height: \"50px\"}}\r\n                />\r\n              </FormGroup>\r\n              <div className=\"d-flex justify-content-between\">\r\n                <Button onClick={() => props.closeCreateReleasModal(true)} color=\"primary\" type=\"button\">\r\n                  Close\r\n                </Button>\r\n                <Button color=\"primary\" type=\"submit\">\r\n                  Create Release\r\n                </Button>\r\n              </div>\r\n            </form>\r\n          </CardBody>\r\n        </Card>\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CreateRelease;\r\n","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\components\\modals\\ReleaseItemsModal.js",["195","196","197"],"import { React, useEffect, useState } from 'react'\r\nimport Moment from 'moment'\r\nimport { getReleaseById, updateRelease } from '../../../services/release.service';\r\n\r\n\r\n// reactstrap components\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    CardTitle,\r\n    Table,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Modal, ModalBody, CardFooter\r\n} from \"reactstrap\";\r\nimport AddWorkModal from './AddWorkModal';\r\nimport DeleteConfirmation from '../../components/partial/DeleteConfirmation';\r\n\r\nfunction ReleaseItemsModal({ selectedRelease, closeReleaseItemsModal }, props) {\r\n    const [releaseItemsData, setReleaseItemsData] = useState({});\r\n    const [loadingData, setLoadingData] = useState(true);\r\n    const [removing, setremoving] = useState(false);\r\n    const [selectedItems, setSelectedItems] = useState([]);\r\n    const [selectedItemForDelete, setSelectedItemForDelete] = useState({});\r\n\r\n\r\n    const {\r\n        className = 'modal-l'\r\n    } = props;\r\n    const [workItemsModal, setworkItemsModal] = useState(false);\r\n    const toggleWorkItemsModal = () => setworkItemsModal(!workItemsModal);\r\n\r\n    const [deleteConfirmModal, setDeleteConfirmModal] = useState(false);\r\n    const toggleDeleteConfirmModal = () => setDeleteConfirmModal(!deleteConfirmModal);\r\n\r\n\r\n    useEffect(() => {\r\n        setLoadingData(true);\r\n        getItems();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n    }, [removing])\r\n\r\n    useEffect(() => {\r\n        setLoadingData(true);\r\n        const selectedItemIds = selectedItems?.map(item => item.id) || [];\r\n        const alreadyAddedItemIds = releaseItemsData.works?.map(item => item.id) || [];\r\n        let sameItems = selectedItemIds.every(element => {\r\n            return alreadyAddedItemIds.includes(element);\r\n        });\r\n\r\n        if (!sameItems && !removing) {\r\n            updateReleaseItems(selectedItems);\r\n            toggleWorkItemsModal();\r\n        } else if (removing) {\r\n            updateReleaseItems();\r\n        }\r\n    }, [selectedItems]);\r\n\r\n    const getItems = async () => {\r\n        const response = await getReleaseById(selectedRelease.id)\r\n        setReleaseItemsData({ ...response.data });\r\n        setLoadingData(false);\r\n    }\r\n\r\n    const updateReleaseItems = async () => {\r\n        const updatedRelease = releaseItemsData;\r\n        updatedRelease.works = selectedItems;\r\n        const response = await updateRelease(updatedRelease);\r\n        if (response) {\r\n            setremoving(false);\r\n            getItems();\r\n        }\r\n    }\r\n\r\n    const removeItem = (item) => {\r\n        setLoadingData(true);\r\n        setremoving(true);\r\n        console.log(releaseItemsData.works, item)\r\n        let items = releaseItemsData.works;\r\n\r\n        const ind = items.findIndex(addedItem => addedItem.id === item.id);\r\n        console.log(ind)\r\n        if (ind > -1) {\r\n            items[ind].checked = false;\r\n            items.splice(ind, 1);\r\n            setSelectedItems([...items]);\r\n        }\r\n        toggleDeleteConfirmModal();\r\n    }\r\n\r\n    const confirmationModalActions = (item = null, onlyClose = true) => {\r\n        if (!onlyClose)\r\n            setSelectedItemForDelete({ ...item });\r\n\r\n        toggleDeleteConfirmModal();\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Row hidden={workItemsModal}>\r\n                <Col md=\"12\">\r\n                    <Card className=\"card-plain\">\r\n                        <CardHeader className=\"d-flex justify-content-between\">\r\n                            <div>\r\n                                <CardTitle tag=\"h4\">( {Moment(selectedRelease.releaseDate).format('DD-MM-YYYY')} ) Release Scope</CardTitle>\r\n                                <p className=\"category\">You can add or delete item</p>\r\n                            </div>\r\n                        </CardHeader>\r\n                        <CardBody className=\"table-case release-items-modal-body\">\r\n                            <div className=\"table-responsive\">\r\n                                <table className=\"table table-striped\">\r\n                                    <thead className=\"text-primary\">\r\n                                        <tr className=\"table-head-tr\">\r\n                                            <th>Type</th>\r\n                                            <th>Ticket Id</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n\r\n                                        {\r\n                                            loadingData &&\r\n                                            <tr>\r\n                                                <td colspan=\"2\">\r\n                                                    <div className=\"d-flex w-100 justify-content-center\">\r\n                                                        <div class=\"spinner\">\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </td>\r\n                                            </tr>\r\n                                        }\r\n\r\n                                        {!loadingData && releaseItemsData.works.length > 0 &&\r\n                                            releaseItemsData.works.map((item, index) =>\r\n                                                <tr key={index} className=\"table-body-tr\">\r\n                                                    <td>\r\n                                                        <span className=\"menu-icon\">\r\n                                                            <i className={item.type === 'Bug' ? \"mdi mdi-bug bug-icon\" : \"mdi mdi-book-open-page-variant development-icon\"}></i>\r\n                                                        </span>\r\n                                                        <span>{item.type}</span> </td>\r\n                                                    <td>{item.ticketId}</td>\r\n                                                    <td className=\"text-right\">\r\n                                                        <button onClick={() => confirmationModalActions(item, false)} type=\"button\" className=\"btn btn-inverse-dark btn-rounded btn-icon ml-2\">\r\n                                                            <i style={{ color: 'white' }} className=\"mdi mdi-delete ml-1\"></i>\r\n                                                        </button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            )\r\n                                        }\r\n\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </CardBody>\r\n                        <CardFooter>\r\n                            <div className=\"d-flex justify-content-between\">\r\n                                <Button onClick={closeReleaseItemsModal} className=\"btn btn-rounded  \" color=\"danger\">\r\n                                    Close <i class=\"fas fa-times-circle\"></i>\r\n                                </Button>\r\n                                <Button onClick={toggleWorkItemsModal} className=\"btn btn-rounded    \" color=\"primary\">\r\n                                    Add <i class=\"fas fa-plus-circle\"></i>\r\n                                </Button>\r\n                            </div>\r\n                        </CardFooter>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n\r\n\r\n            <Modal isOpen={workItemsModal} toggle={toggleWorkItemsModal} className={className}>\r\n                <ModalBody>\r\n                    <AddWorkModal closeModal={toggleWorkItemsModal} initData={releaseItemsData.works} updateReleaseItems={setSelectedItems} ></AddWorkModal>\r\n                </ModalBody>\r\n            </Modal>\r\n\r\n            <Modal isOpen={deleteConfirmModal} toggle={toggleDeleteConfirmModal} className={className}>\r\n                <ModalBody>\r\n                    <DeleteConfirmation message=\"Are You Sure You Want Delete ?\" actionYes={() => removeItem(selectedItemForDelete)} actionNo={confirmationModalActions}></DeleteConfirmation>\r\n                </ModalBody>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReleaseItemsModal\r\n","C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\assets\\validations\\createReleaseValidation.js",[],"C:\\Users\\gizem.ay\\Documents\\Projects\\personal\\wa-app\\src\\app\\components\\modals\\AddWorkModal.js",["198","199","200"],{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","severity":1,"message":"206","line":11,"column":8,"nodeType":"207","endLine":11,"endColumn":10,"suggestions":"208"},{"ruleId":"209","severity":1,"message":"210","line":16,"column":47,"nodeType":"211","messageId":"212","endLine":16,"endColumn":53},{"ruleId":"209","severity":1,"message":"213","line":16,"column":55,"nodeType":"211","messageId":"212","endLine":16,"endColumn":62},{"ruleId":"209","severity":1,"message":"214","line":4,"column":33,"nodeType":"211","messageId":"212","endLine":4,"endColumn":44},{"ruleId":"209","severity":1,"message":"215","line":14,"column":10,"nodeType":"211","messageId":"212","endLine":14,"endColumn":12},{"ruleId":"205","severity":1,"message":"216","line":47,"column":9,"nodeType":"207","endLine":47,"endColumn":18,"suggestions":"217"},{"ruleId":"209","severity":1,"message":"218","line":35,"column":10,"nodeType":"211","messageId":"212","endLine":35,"endColumn":16},{"ruleId":"209","severity":1,"message":"219","line":14,"column":54,"nodeType":"211","messageId":"212","endLine":14,"endColumn":62},{"ruleId":"205","severity":1,"message":"220","line":44,"column":9,"nodeType":"207","endLine":44,"endColumn":11,"suggestions":"221"},{"ruleId":"222","severity":1,"message":"223","line":87,"column":34,"nodeType":"224","messageId":"225","endLine":87,"endColumn":36},{"ruleId":"209","severity":1,"message":"226","line":14,"column":6,"nodeType":"211","messageId":"212","endLine":14,"endColumn":11},{"ruleId":"205","severity":1,"message":"216","line":46,"column":9,"nodeType":"207","endLine":46,"endColumn":18,"suggestions":"227"},{"ruleId":"209","severity":1,"message":"228","line":137,"column":12,"nodeType":"211","messageId":"212","endLine":137,"endColumn":34},{"ruleId":"205","severity":1,"message":"216","line":42,"column":8,"nodeType":"207","endLine":42,"endColumn":10,"suggestions":"229"},{"ruleId":"205","severity":1,"message":"230","line":61,"column":8,"nodeType":"207","endLine":61,"endColumn":23,"suggestions":"231"},{"ruleId":"205","severity":1,"message":"216","line":56,"column":8,"nodeType":"207","endLine":56,"endColumn":17,"suggestions":"232"},{"ruleId":"209","severity":1,"message":"233","line":21,"column":24,"nodeType":"211","messageId":"212","endLine":21,"endColumn":40},{"ruleId":"205","severity":1,"message":"234","line":26,"column":6,"nodeType":"207","endLine":26,"endColumn":20,"suggestions":"235"},{"ruleId":"209","severity":1,"message":"226","line":12,"column":5,"nodeType":"211","messageId":"212","endLine":12,"endColumn":10},{"ruleId":"205","severity":1,"message":"216","line":42,"column":8,"nodeType":"207","endLine":42,"endColumn":10,"suggestions":"236"},{"ruleId":"205","severity":1,"message":"230","line":61,"column":8,"nodeType":"207","endLine":61,"endColumn":23,"suggestions":"237"},{"ruleId":"209","severity":1,"message":"226","line":10,"column":5,"nodeType":"211","messageId":"212","endLine":10,"endColumn":10},{"ruleId":"209","severity":1,"message":"238","line":17,"column":5,"nodeType":"211","messageId":"212","endLine":17,"endColumn":10},{"ruleId":"205","severity":1,"message":"216","line":56,"column":8,"nodeType":"207","endLine":56,"endColumn":17,"suggestions":"239"},"no-native-reassign",["240"],"no-negated-in-lhs",["241"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'activeUser'. Either include it or remove the dependency array.","ArrayExpression",["242"],"no-unused-vars","'errors' is assigned a value but never used.","Identifier","unusedVar","'touched' is assigned a value but never used.","'ButtonGroup' is defined but never used.","'tr' is defined but never used.","React Hook useEffect has a missing dependency: 'getItems'. Either include it or remove the dependency array.",["243"],"'logout' is defined but never used.","'CardText' is defined but never used.","React Hook useEffect has a missing dependency: 'getFiles'. Either include it or remove the dependency array.",["244"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Table' is defined but never used.",["245"],"'setSelectedReleaseDate' is assigned a value but never used.",["246"],"React Hook useEffect has missing dependencies: 'releaseItemsData.works', 'removing', 'toggleWorkItemsModal', and 'updateReleaseItems'. Either include them or remove the dependency array.",["247"],["248"],"'setDateFromChild' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'formik'. Either include it or remove the dependency array.",["249"],["250"],["251"],"'Label' is defined but never used.",["252"],"no-global-assign","no-unsafe-negation",{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"255","fix":"259"},{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},{"desc":"255","fix":"264"},{"desc":"265","fix":"266"},{"desc":"260","fix":"267"},{"desc":"262","fix":"268"},{"desc":"255","fix":"269"},"Update the dependencies array to be: [activeUser]",{"range":"270","text":"271"},"Update the dependencies array to be: [filters, getItems]",{"range":"272","text":"273"},"Update the dependencies array to be: [getFiles]",{"range":"274","text":"275"},{"range":"276","text":"273"},"Update the dependencies array to be: [getItems]",{"range":"277","text":"278"},"Update the dependencies array to be: [releaseItemsData.works, removing, selectedItems, toggleWorkItemsModal, updateReleaseItems]",{"range":"279","text":"280"},{"range":"281","text":"273"},"Update the dependencies array to be: [formik, selectedDate]",{"range":"282","text":"283"},{"range":"284","text":"278"},{"range":"285","text":"280"},{"range":"286","text":"273"},[365,367],"[activeUser]",[1765,1774],"[filters, getItems]",[1555,1557],"[getFiles]",[1335,1344],[1333,1335],"[getItems]",[1948,1963],"[releaseItemsData.works, removing, selectedItems, toggleWorkItemsModal, updateReleaseItems]",[1533,1542],[782,796],"[formik, selectedDate]",[1346,1348],[1961,1976],[1533,1542]]